#!/usr/bin/env python3

import argparse
from PIL import Image

def encode_image(image_path, message, output_path="encoded_image.png"):
    img = Image.open(image_path)
    binary_message = ''.join(format(ord(char), '08b') for char in message) + '1111111111111110'  # EOF marker

    if img.mode != 'RGB':
        img = img.convert('RGB')

    pixels = list(img.getdata())
    new_pixels = []
    msg_index = 0

    for pixel in pixels:
        r, g, b = pixel
        if msg_index < len(binary_message):
            r = (r & ~1) | int(binary_message[msg_index])
            msg_index += 1
        if msg_index < len(binary_message):
            g = (g & ~1) | int(binary_message[msg_index])
            msg_index += 1
        if msg_index < len(binary_message):
            b = (b & ~1) | int(binary_message[msg_index])
            msg_index += 1
        new_pixels.append((r, g, b))

    img.putdata(new_pixels)
    img.save(output_path)
    print(f"[+] Message successfully encoded into {output_path}")

def decode_image(image_path):
    img = Image.open(image_path)
    if img.mode != 'RGB':
        img = img.convert('RGB')

    binary_data = ""
    for pixel in list(img.getdata()):
        for channel in pixel:
            binary_data += str(channel & 1)

    bytes_data = [binary_data[i:i+8] for i in range(0, len(binary_data), 8)]
    decoded_message = ""
    for byte in bytes_data:
        if byte == '11111110':  # EOF marker
            break
        decoded_message += chr(int(byte, 2))
    print(f"[+] Hidden message: {decoded_message}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Custom LSB Steganography Tool")
    parser.add_argument('-f', '--file', required=True, help="Path to input image")
    parser.add_argument('-m', '--message', help="Message to encode")
    parser.add_argument('--encode', action='store_true', help="Encode a message")
    parser.add_argument('--decode', action='store_true', help="Decode a message")
    parser.add_argument('-o', '--output', default="encoded_image.png", help="Output image path (for encoding)")

    args = parser.parse_args()

    if args.encode:
        if not args.message:
            print("[-] Error: Message is required for encoding.")
        else:
            encode_image(args.file, args.message, args.output)
    elif args.decode:
        decode_image(args.file)
    else:
        print("[-] Error: You must choose either --encode or --decode.")
